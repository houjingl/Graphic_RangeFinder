#define JP1_BASE 0xFF200060
#define JP2_BASE 0xFF200070
#define TIMER1_BASE 0xFF202000
#define TIMER2_BASE 0xFF202020
#define HEX3_HEX0_BASE 0xFF200020
#define Trigger 0
#define Echo 1

#define SEG_0 0x3F  // 0b00111111: segments 0..5 on, 6 off
#define SEG_1 0x06  // 0b00000110: segments 1,2 on
#define SEG_2 0x5B  // 0b01011011
#define SEG_3 0x4F  // 0b01001111
#define SEG_4 0x66  // 0b01100110
#define SEG_5 0x6D  // 0b01101101
#define SEG_6 0x7D  // 0b01111101
#define SEG_7 0x07  // 0b00000111
#define SEG_8 0x7F  // 0b01111111
#define SEG_9 0x6F  // 0b01101111

#ifndef VGA_controller
#define VGA_controller 0xff203020
#define PI 3.141592653589793
#endif

#include <math.h>
#include <stdio.h>
#include <stdlib.h>

volatile int pixel_buffer_start;       // global variable
volatile short int Buffer1[240][512];  // 240 rows, 512 (320 + padding) columns
volatile short int Buffer2[240][512];

int calculate_x(int distance, int angle);
int calculate_y(int distance, int angle);
void plot_pixel(int x, int y, short int line_color);
void wait_for_vsync();
void clear_screen();
void swap(int* a, int* b);
void draw_line(int x0, int y0, int x1, int y1, short int color);

void plot_pixel(int x, int y, short int line_color) {
  volatile short int* one_pixel_address;

  one_pixel_address = pixel_buffer_start + (y << 10) + (x << 1);

  *one_pixel_address = line_color;
}

void wait_for_vsync() {
  volatile int* pixel_ctrl_ptr = (int*)0xFF203020;
  *pixel_ctrl_ptr = 1;  // start v sync
  while ((*(pixel_ctrl_ptr + 3) & 0x1) != 0);
}

void clear_screen() {
  for (int i = 0; i < 240; i++) {
    for (int j = 0; j < 320; j++) {
      plot_pixel(j, i, 0x0);
    }
  }
}

void swap(int* a, int* b) {
  int temp = *b;
  *b = *a;
  *a = temp;
}

void draw_line(int x0, int y0, int x1, int y1, short int color) {
  // 1.determine which axis is steeper
  // 2. if y steep, work along y, if x is steep, walk along x
  //(y - y0) = m(x - x0) -> x are the i value;
  int unsigned_delta_y = y1 - y0;
  int unsigned_delta_x = x1 - x0;

  if (unsigned_delta_x < 0) {
    unsigned_delta_x *= -1;
  }
  if (unsigned_delta_y < 0) {
    unsigned_delta_y *= -1;
  }

  if (unsigned_delta_x < unsigned_delta_y) {
    swap(&x0, &y0);
    swap(&x1, &y1);
  }
  if (x0 > x1) {
    swap(&x0, &x1);
    swap(&y0, &y1);
  }

  int delta_x = x1 - x0;
  int delta_y = y1 - y0;
  if (delta_y < 0) {
    delta_y *= -1;
  }
  int error = -(delta_x / 2);
  int y = y0;
  int y_step = 0;
  if (y0 < y1) {
    y_step = 1;
  } else {
    y_step = -1;
  }

  for (int i = x0; i <= x1; i++) {
    if (unsigned_delta_x < unsigned_delta_y) {
      plot_pixel(y, i, color);
    } else {
      plot_pixel(i, y, color);
    }
    error = error + delta_y;
    if (error > 0) {
      y = y + y_step;
      error = error - delta_x;
    }
  }
}

// angle = pulse width -50

int calculate_x(distance, angle) {
  // r=150; max 2 meters
  int x;
  if (distance >=200){distance = 200;}
  x = (int)distance * 0.75 * cos(angle / 170 * PI) + 160;
  return x;
}

int calculate_y(distance, angle) {
  int y;
  if (distance >=200){distance = 200;}
  y = (int)239 - distance * 0.75 * sin(angle / 170 * PI);
  return y;
}

volatile unsigned int distance;
unsigned char signArray[] = {SEG_0, SEG_1, SEG_2, SEG_3, SEG_4,
                             SEG_5, SEG_6, SEG_7, SEG_8, SEG_9};

void ultrasonic_init() {
  // Set up JP1 Trig bit as output, Echo bit as input
  volatile int* parallel_port1_base = (int*)JP1_BASE;
  *(parallel_port1_base + 1) = 0x1;
}

void ultrasonic_CountDown_start() {
  volatile int* timer_base = (int*)TIMER1_BASE;
  // Fill up timer content
  *(timer_base + 2) = 0xffff;
  *(timer_base + 3) = 0xffff;
  *(timer_base) = 0x0;         // clear TO
  *(timer_base + 1) = 0b0110;  // set to continuous count mode. Disable
                               // interrupt
}

void ultrasonic_count_10us() {
  volatile int* timer_base = (int*)TIMER1_BASE;
  int timer_content = 1000;
  *(timer_base + 2) = timer_content;
  *(timer_base + 3) = 0x0;
  *(timer_base) = 0x0;         // clear TO
  *(timer_base + 1) = 0b0110;  // set to continuous count mode. Disable
                               // interrupt
}

void ultrasonic_timer_stop() {
  volatile int* timer_base = (int*)TIMER1_BASE;
  *(timer_base + 1) = 0b1010;
}

void ultrasonic_send_wave() {
  volatile int* parallel_port1_base = (int*)JP1_BASE;
  volatile int* timer_base = (int*)TIMER1_BASE;
  *(parallel_port1_base) |= (1 << Trigger);
  ultrasonic_count_10us();
  while ((*timer_base & 0x1) == 0);
  ultrasonic_timer_stop();
  *(parallel_port1_base) &= ~(1 << Trigger);
}

int ultrasonic_compute_distance_cm() {
  volatile int* parallel_port1_base = (int*)JP1_BASE;
  volatile int* timer_base = (int*)TIMER1_BASE;
  volatile int* store = 0x20000;
  double distance = 0;
  while (((*parallel_port1_base & (1 << Echo)) >> Echo) ==
         0);  // wait when echo is not received;
  ultrasonic_CountDown_start();
  while ((*parallel_port1_base & (1 << Echo)) >>
         Echo);  // wait when echo is high
  *(timer_base + 4) = 0x1;
  unsigned int timer_current_low = *(timer_base + 4);
  unsigned int timer_current_high = *(timer_base + 5);
  ultrasonic_timer_stop();
  unsigned int timer_current = timer_current_low + (timer_current_high << 16);
  *(store + 2) = timer_current;
  *(store + 3) = *(timer_base + 2) + ((*(timer_base + 3) << 16));
  distance = ((0xFFFFFFFF - timer_current) / 100000000.0) * (170) * 100.0;
  // Distance in cm
  return (int)distance;
  // round to 1 decimal places
}

#define TIMER2_BASE 0xFF202020
#define LED_base 0xFF200000
#define TIMER2_IRQ 17
#define TS 2000
#define Servo 2  // using DP2

#ifndef JP1_BASE
#define JP1_BASE 0xFF200060
#endif

#ifndef KEY_BASE
#define KEY_BASE 0xFF200050
#define KEY_IRQ 18
#endif

volatile int count = 0;
volatile int count_rotate = 0;
volatile int fbi = 1;
// int count2 = 0;
// double pwm_duty_ratio = 0.5; //default 50% duty ratio
volatile int* key_base = (int*)KEY_BASE;
volatile int pulse_width = 50;

void timer2_start();
void timer2_stop();
void timer2_ISR();
void __attribute__((interrupt("machine"))) ISR_HANDLER(void);
void timer2_interrupt_init();
void timer2_init();

void timer2_start() {
  int* timer2_base = (int*)TIMER2_BASE;
  *timer2_base = 0x0;
  *(timer2_base + 1) = 0b0111;
}

void timer2_stop() {
  int* timer2_base = (int*)TIMER2_BASE;
  *timer2_base = 0x0;
  *(timer2_base + 1) = 0b1010;
}

void timer2_ISR() {
  timer2_stop();
  volatile int* jp1 = (int*)JP1_BASE;
  // PWM generator
  count++;
  count %= TS;
  count_rotate++;
  count_rotate %= TS * 2;
  if (!count_rotate) {

    if (pulse_width <= 50) {
      fbi = 1;
    } else if (pulse_width >= 240) {
      fbi = -1;
    }
    pulse_width += fbi;
  }
  if (count < pulse_width) {
    // set corresponding pin to 1
    *jp1 |= (1 << Servo);
  } else {
    // set corresponding pin to 0
    *jp1 &= ~(1 << Servo);
  }
  timer2_start();
}

void __attribute__((interrupt("machine"))) ISR_HANDLER(
    void)  // declare this subroutine as an ISR
{
  int mcause_value = 0x0;
  __asm__ volatile("csrr %0, mcause" : "=r"(mcause_value));
  if (mcause_value == (TIMER2_IRQ + 0x80000000)) {
    timer2_ISR();
  }
}

void timer2_interrupt_init() {
  // THIS FUNCTION ONLY OPERATES THE GENERAL INTERRUPT CONTROL REGs
  volatile int* timer2_base = (int*)TIMER2_BASE;
  volatile int timer2_IRQ = TIMER2_IRQ;
  int mstatus_value, IRQ_value, mtvec_value;
  mstatus_value = 0b1000;  // disable global interrupt
  __asm__ volatile("csrc mstatus, %0" ::"r"(mstatus_value));

  IRQ_value |= (1 << timer2_IRQ);  // set timer2 IRQ to mie
  __asm__ volatile("csrs mie, %0" ::"r"(IRQ_value));

  mtvec_value = (int)&ISR_HANDLER;  // load mtvec
  __asm__ volatile("csrw mtvec, %0" ::"r"(mtvec_value));

  // enable global interrupt
  __asm__ volatile("csrs mstatus, %0" ::"r"(mstatus_value));
}

void timer2_init() {
  int* timer2_base = (int*)TIMER2_BASE;
  int timer2_content = 1000;  // 10 us
  *(timer2_base) = 0x0;
  *(timer2_base + 1) = 0b1011;
  *(timer2_base + 2) = timer2_content;
  *(timer2_base + 3) = timer2_content >> 16;
  timer2_interrupt_init();
}

int main() {
  timer2_init();
  timer2_start();
  ultrasonic_init();
  volatile int* seg_base = (int*)HEX3_HEX0_BASE;
  volatile int* jp1Base = (int*)JP1_BASE;
  *(jp1Base + 1) |= (1 << Servo);

  volatile int* pixel_ctrl_ptr = (int*)0xFF203020;
  volatile int distance_x[170] = {0};
  volatile int distance_y[170] = {0};

  /* set front pixel buffer to Buffer 1 */
  *(pixel_ctrl_ptr + 1) =
      (int)&Buffer1;  // first store the address in the  back buffer
  /* now, swap the front/back buffers, to set the front buffer location */
  wait_for_vsync();
  /* initialize a pointer to the pixel buffer, used by drawing functions */
  pixel_buffer_start = *pixel_ctrl_ptr;
  clear_screen();  // pixel_buffer_start points to the pixel buffer

  /* set back pixel buffer to Buffer 2 */
  *(pixel_ctrl_ptr + 1) = (int)&Buffer2;
  pixel_buffer_start = *(pixel_ctrl_ptr + 1);  // we draw on the back buffer
  clear_screen();  // pixel_buffer_start points to the pixel buffer

  while (1) {
    unsigned int segDisplay = 0x0;
    int i = 0;
    int dist;
    int angle;
    ultrasonic_send_wave();
    distance = ultrasonic_compute_distance_cm();
    dist = distance;
    volatile int* led_base = 0xFF200000;
    *led_base ^= 0x1;
    while (i != 32) {
      unsigned char lsd = distance % 10;
      segDisplay += (signArray[lsd] << i);
      i += 8;
      distance /= 10;
    }
    *seg_base = segDisplay;

    angle = pulse_width - 50;
    draw_line(160, 239, distance_x[angle], distance_y[angle], 0x0);
    // short int color = boxColor[i];
    draw_line(160, 239, calculate_x(dist, angle), calculate_y(dist, angle),
               0xf800);
    distance_x[angle] = calculate_x(dist, angle);
    distance_y[angle] = calculate_y(dist, angle);
    // code for updating the locations of boxes (not shown)
    wait_for_vsync();  // swap front and back buffers on VGA vertical sync
    pixel_buffer_start = *(pixel_ctrl_ptr + 1);  // new back buffer
  }
}
